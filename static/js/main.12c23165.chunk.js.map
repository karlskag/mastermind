{"version":3,"sources":["config.js","core.js","Success.js","GameStage.js","ColorSelect.js","App.js","serviceWorker.js","index.js"],"names":["difficulty","colors","red","blue","black","white","yellow","green","shuffle","arr","sort","Math","random","createState","correctColors","createCombination","previousGuesses","currentGuess","results","cheats","0","1","2","3","colorsToUse","possibleColors","Object","keys","i","config","push","floor","length","addColorToCurrentGuess","state","color","concat","guess","possibleMatches","toConsumableArray","correct","almost","forEach","index","matchingIndex","indexOf","filter","_","includes","map","checkGuess","guessWasCorrect","a1","a2","JSON","stringify","src_Success","props","react_default","a","createElement","style","marginBottom","core","className","onClick","triggerEvent","name","GameStage","getShape","backgroundColor","Fragment","marginLeft","key","isColorRevealed","border","data","paddingTop","paddingLeft","getCorrectShapes","clues","noMatch","marginTop","getClues","src_ColorSelect","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleEvent","bind","assertThisInitialized","_ref","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12c23165.chunk.js","sourcesContent":["//Default difficulty\nexport const difficulty = 4;\n","import * as config from './config';\n\nexport const colors = {\n  red: '#f17d77',\n  blue: '#9ebbc3',\n  black: '#1f222b',\n  white: '#ffffff',\n  yellow: '#fbbe19',\n  green: '#7b9e83'\n};\n\nfunction shuffle(arr) {\n  return arr.sort(() => Math.random() - 0.5);\n}\n\nexport function createState() {\n  return {\n    correctColors: createCombination(),\n    previousGuesses: [],\n    currentGuess: [],\n    results: {},\n    cheats: {\n      0: false,\n      1: false,\n      2: false,\n      3: false\n    }\n  };\n}\n\nfunction createCombination() {\n  let colorsToUse = [];\n  const possibleColors = Object.keys(colors);\n\n  for (let i = 0; i < config.difficulty; i++) {\n      colorsToUse.push(possibleColors[Math.floor(Math.random() * possibleColors.length)]);\n  }\n\n  return shuffle(colorsToUse);\n}\n\nexport function revealColor(state, index) {\n  state.cheats[index] = true;\n  return state;\n}\n\nexport function getCorrectColors(state) {\n  return state.correctColors;\n}\n\nexport function getCurrentGuess(state) {\n  return state.currentGuess;\n}\n\nexport function getGuesses(state) {\n  return state.previousGuesses;\n}\n\nexport function getAllColors(state) {\n  return Object.keys(colors);\n}\n\nexport function addColorToCurrentGuess(state, color) {\n  state.currentGuess = state.currentGuess.concat([color]);\n  if (state.currentGuess.length === 4) {\n    state.results[state.previousGuesses.length] = checkGuess(state, state.currentGuess);\n    state.previousGuesses = state.previousGuesses.concat([state.currentGuess]);\n    state.currentGuess = [];\n  }\n  return state;\n}\n\nfunction arraysEqual(a1,a2) {\n  /* WARNING: arrays must not contain {objects} or behavior may be undefined */\n  return JSON.stringify(a1) === JSON.stringify(a2);\n}\n\nexport function guessWasCorrect(state) {\n  return arraysEqual(state.correctColors, state.previousGuesses[state.previousGuesses.length - 1]);\n}\n\nexport function getNumberOfGuesses(state) {\n  return state.previousGuesses.length;\n}\n\nexport function getResultForGuess(state, index) {\n  return state.results[index];\n}\n\nexport function checkGuess(state, guess) {\n  let possibleMatches = [...state.correctColors]\n  let correct = [];\n  let almost = [];\n\n  //Check for right color and position\n  guess.forEach(function (color, index) {\n    if (color === state.correctColors[index]) {\n      const matchingIndex = possibleMatches.indexOf(color);\n      possibleMatches = possibleMatches.filter(function (_, i) {return matchingIndex !== i;});\n      correct.push(index);\n    }\n  });\n\n  //Check for right color\n  guess.forEach(function (color, index) {\n    const matchingIndex = possibleMatches.indexOf(color);\n    if (matchingIndex !== -1 && !correct.includes(index)) {\n      possibleMatches = possibleMatches.filter(function (_, i) {return matchingIndex !== i;});\n      almost.push(index);\n    }\n  });\n\n  //transforms\n  correct = correct.map(() => 'black');\n  almost = almost.map(() => 'white');\n\n  return shuffle(correct.concat(almost));\n}\n","import React from 'react';\nimport * as core from './core';\nimport './Success.css';\n\nexport default function (props) {\n  const state = props.state;\n  return (\n    <div>\n      <h2>COMBINATION CORRECT!</h2>\n      <h3 style={{marginBottom: 50}}>- You got it right after <u>{core.getNumberOfGuesses(state)} guesses</u> -</h3>\n      <div\n        className=\"replayButton\"\n        onClick={function () {\n          props.triggerEvent({\n            name: 'restartChosen'\n          });\n      }}>RESTART</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Game.css';\nimport * as core from './core';\nimport Success from './Success';\n\nexport default function (props) {\n  const state = props.state;\n\n  function getShape(color) {\n    return <span className=\"circle\" style={{backgroundColor: core.colors[color]}}></span>\n  }\n\n  function getCorrectShapes(color, index, triggerEvent) {\n    const isColorRevealed = state.cheats[index];\n    return <span\n               className=\"circle\"\n               style={{border: '1px solid black',backgroundColor: isColorRevealed ? core.colors[color] : '#f2f2f2'}}\n               onClick={function() {\n                 props.triggerEvent({\n                  name: 'hiddenColorClick',\n                  data: index\n                 });\n               }}>\n               {<section style={{paddingTop: 3, paddingLeft: 1}}>?</section>}\n             </span>\n  }\n\n  function getClues(state, index) {\n    const clues = core.getResultForGuess(state, index);\n    const noMatch = <span className=\"smallCircle\"></span>;\n\n    return (\n      <div>\n        <div style={{marginTop: -3}}>\n            {clues[0] ? <span className=\"smallCircle\" style={{backgroundColor: core.colors[clues[0]]}}></span> : noMatch}\n            {clues[1] ? <span className=\"smallCircle\" style={{backgroundColor: core.colors[clues[1]]}}></span> : noMatch}\n        </div>\n        <div style={{marginTop: -10}}>\n            {clues[2] ? <span className=\"smallCircle\" style={{backgroundColor: core.colors[clues[2]]}}></span> : noMatch}\n            {clues[3] ? <span className=\"smallCircle\" style={{backgroundColor: core.colors[clues[3]]}}></span> : noMatch}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div style={{marginBottom: 30, marginLeft: -17}}>\n        {core.getCorrectColors(state).map(function (color, index) {\n          return <span key={'CorrectColor' + index} className=\"shapeContainer\">{getCorrectShapes(color, index, props.triggerEvent)}</span>;\n        })}\n      </div>\n      <div>\n        {core.getGuesses(state).map(function (guess, index) {\n          return (\n            <div key={'prevGuess' + index} className=\"prevGuessContainer\">\n              {guess.map(function (color, index) {\n                return <span key={'prevGuessColor' + index} className=\"shapeContainer\">{getShape(color)}</span>;\n              })}\n              {getClues(state, index)}\n            </div>\n          );\n        })}\n      </div>\n      <div style={{marginTop: 50}}>\n        {core.getCurrentGuess(state).map(function (color, index) {\n          return <span key={'currentGuess' + index} className=\"shapeContainer\">{getShape(color)}</span>;\n        })}\n      </div>\n      {core.guessWasCorrect(state) && <Success {...props}/>}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport * as core from './core';\nimport './ColorSelect.css';\n\nexport default function (props) {\n  const state = props.state;\n\n  function getShape(color) {\n    return <span\n              onClick={function () {\n                props.triggerEvent({\n                  name: 'colorChosen',\n                  data: color\n                });\n              }}\n              className=\"selectionCircle\"\n              style={{backgroundColor: core.colors[color]}}>\n           </span>\n  }\n\n  return (\n    <div className=\"selectionPanelContainer\">\n      <h2 style={{paddingLeft: 15}}>Pick a color:</h2>\n      {core.getAllColors(state).map(function (color, index) {\n        return (\n          <span key={color} className=\"colorContainer\">\n            {getShape(color)}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport GameStage from './GameStage';\nimport ColorSelect from './ColorSelect';\nimport * as core from './core';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = core.createState();\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  handleEvent({name, data}) {\n    const state = this.state;\n    if (name === 'colorChosen') {\n      this.setState(core.addColorToCurrentGuess(state, data));\n    } else if (name === 'restartChosen') {\n      this.setState(core.createState());\n    } else if (name === 'hiddenColorClick') {\n      this.setState(core.revealColor(state, data));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"GameContainer\">\n          <GameStage state={this.state} triggerEvent={this.handleEvent}/>\n          <ColorSelect state={this.state} triggerEvent={this.handleEvent}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}